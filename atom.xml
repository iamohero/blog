<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iamhero</title>
  <subtitle>不以物喜，不以己悲</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://iamohero.github.io/"/>
  <updated>2017-05-11T00:29:04.000Z</updated>
  <id>http://iamohero.github.io/</id>
  
  <author>
    <name>yuanguolei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>缓存在分布式系统中的应用（一）</title>
    <link href="http://iamohero.github.io/2017/05/10/aboutcache1/"/>
    <id>http://iamohero.github.io/2017/05/10/aboutcache1/</id>
    <published>2017-05-10T14:13:40.000Z</published>
    <updated>2017-05-11T00:29:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文是缓存在分布式应用第一篇文章，介绍缓存的原理，缓存的分类，缓存的设计，CDN缓存（原理，架构参考和技术实践），反向代理缓存（原理，Squid架构实践和常用代理缓存之间的比较）。本文主要是自己的学习总结和网络文章摘录，供学习之用。</p>
<h2 id="本次分享大纲"><a href="#本次分享大纲" class="headerlink" title="本次分享大纲"></a>本次分享大纲</h2><ol>
<li>缓存概述</li>
<li>CDN缓存</li>
<li>反向代理缓存</li>
<li>分布式缓存</li>
<li>本地缓存</li>
<li>缓存架构示例</li>
<li>参考资料</li>
<li>分享总结</li>
</ol>
<a id="more"></a>
<h3 id="一、缓存概述"><a href="#一、缓存概述" class="headerlink" title="一、缓存概述"></a>一、缓存概述</h3><p> 缓存是分布式系统中的重要组件，主要解决高并发，大数据场景下，热点数据访问的性能问题。提供高性能的数据快速访问。</p>
<h4 id="1-1-缓存的原理"><a href="#1-1-缓存的原理" class="headerlink" title="1.1 缓存的原理"></a>1.1 缓存的原理</h4><p>（1）       将数据写入/读取速度更快的存储（设备）；</p>
<p>（2）       将数据缓存到离应用最近的位置；</p>
<p>（3）       将数据缓存到离用户最近的位置；</p>
<h4 id="1-2-缓存分类"><a href="#1-2-缓存分类" class="headerlink" title="1.2 缓存分类"></a>1.2 缓存分类</h4><p> 在分布式系统中，缓存的应用非常广泛，从部署角度有以下几个方面的缓存应用。</p>
<p>（1）       CDN缓存；</p>
<p>（2）       反向代理缓存；</p>
<p>（3）       分布式Cache；</p>
<p>（4）       本地应用缓存；</p>
<h4 id="1-3-缓存媒介"><a href="#1-3-缓存媒介" class="headerlink" title="1.3 缓存媒介"></a>1.3 缓存媒介</h4><ul>
<li><p>常用中间件：Varnish，Ngnix，Squid，Memcache，Redis，Ehcache等；</p>
</li>
<li><p>常缓存的内容：文件，数据，对象；</p>
</li>
<li><p>常缓存的介质：CPU，内存（本地，分布式），磁盘（本地，分布式）</p>
</li>
</ul>
<h4 id="1-4-缓存设计"><a href="#1-4-缓存设计" class="headerlink" title="1.4 缓存设计"></a>1.4 缓存设计</h4><ul>
<li>缓存设计需要解决以下几个问题：</li>
</ul>
<p>（1）       缓存什么？</p>
<pre><code>哪些数据需要缓存：1.热点数据；2.静态资源；
</code></pre><p>（2）       缓存的位置？</p>
<pre><code>CDN，反向代理，分布式缓存服务器，本机（内存，硬盘）
</code></pre><p>（3）       如何缓存的问题？</p>
<pre><code>过期策略
        1.固定时间：比如指定缓存的时间是30分钟；
        2.相对时间：比如最近10分钟内没有访问的数据；

同步机制
        实时写入；（推）
        异步刷新；（推拉）
</code></pre><h3 id="二、CDN缓存"><a href="#二、CDN缓存" class="headerlink" title="二、CDN缓存"></a>二、CDN缓存</h3><p>CDN主要解决将数据缓存到离用户最近的位置，一般缓存静态资源文件（页面，脚本，图片，视频，文件等）。国内网络异常复杂，跨运营商的网络访问会很慢。为了解决跨运营商或各地用户访问问题，可以在重要的城市，部署CDN应用。使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。</p>
<h4 id="2-1-CND原理"><a href="#2-1-CND原理" class="headerlink" title="2.1 CND原理"></a>2.1 CND原理</h4><p>CDN的基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络中，在用户访问网站时，利用全局负载技术将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求。</p>
<p>（1）       未部署CDN应用前</p>
<p><img src="http://images2015.cnblogs.com/blog/820332/201606/820332-20160606062828308-319014468.png" alt="网络请求"></p>
<pre><code>网络请求路径：

    请求：本机网络（局域网）——》运营商网络——》应用服务器机房

    响应：应用服务器机房——》运营商网络——》本机网络（局域网）
</code></pre><p>在不考虑复杂网络的情况下，从请求到响应需要经过3个节点，6个步骤完成一次用户访问操作。</p>
<p>（2）       部署CDN应用后</p>
<p><img src="http://images2015.cnblogs.com/blog/820332/201606/820332-20160606062837558-517040681.png" alt="网络请求"></p>
<pre><code>网络路径：

    请求：本机网络（局域网）——》运营商网络

    响应：运营商网络——》本机网络（局域网）
</code></pre><p>在不考虑复杂网络的情况下，从请求到响应需要经过2个节点，2个步骤完成一次用户访问操作。</p>
<p>与不部署CDN服务相比，减少了1个节点，4个步骤的访问。极大的提高的系统的响应速度。</p>
<h4 id="2-2-CDN优缺点"><a href="#2-2-CDN优缺点" class="headerlink" title="2.2 CDN优缺点"></a>2.2 CDN优缺点</h4><p>（1）优点（摘自百度百科）</p>
<ul>
<li><p>1、本地Cache加速：提升访问速度，尤其含有大量图片和静态页面站点；</p>
</li>
<li><p>2、镜像服务：消除了不同运营商之间互联的瓶颈造成的影响，实现了跨运营商的网络加速，保证不同网络中的用户都能得到良好的访问质量；</p>
</li>
<li><p>3、远程加速：远程访问用户根据<strong>DNS负载均衡技术</strong>智能自动选择Cache服务器，选择最快的Cache服务器，加快远程访问的速度；</p>
</li>
<li><p>4、带宽优化：自动生成服务器的远程Mirror（镜像）cache服务器，远程用户访问时从cache服务器上读取数据，减少远程访问的带宽、分担网络流量、减轻原站点WEB服务器负载等功能。</p>
</li>
<li><p>5、集群抗攻击：广泛分布的CDN节点加上节点之间的智能冗余机制，可以有效地预防黑客入侵以及降低各种D.D.o.S攻击对网站的影响，同时保证较好的服务质量。</p>
</li>
</ul>
<p>（2）缺点</p>
<ul>
<li><p>1.动态资源缓存，需要注意实时性；</p>
<pre><code>解决：主要缓存静态资源，动态资源建立多级缓存或准实时同步；
</code></pre></li>
</ul>
<ul>
<li><p>2.如何保证数据的一致性和实时性需要权衡考虑；</p>
<pre><code>解决：

设置缓存失效时间（1个小时，最终一致性）；
数据版本号；
</code></pre></li>
</ul>
<h4 id="2-3-CND架构参考"><a href="#2-3-CND架构参考" class="headerlink" title="2.3 CND架构参考"></a>2.3 CND架构参考</h4><p>  摘自《云宙视频CDN系统》</p>
<p>  <img src="http://images2015.cnblogs.com/blog/820332/201606/820332-20160606062848590-1014999706.jpg" alt="CDN系统"></p>
<h4 id="2-4-CND技术实践"><a href="#2-4-CND技术实践" class="headerlink" title="2.4 CND技术实践"></a>2.4 CND技术实践</h4><p>  目前，中小型互联网公司，综合成本考虑，一般租用第三方CDN服务，大型互联网公司，采用自建或第三方结合的方式。比如淘宝刚开始使用第三方的，当流量很大后，第三方公司无法支撑其CDN流量，淘宝最后采用自建CDN的方式实现。</p>
<p>淘宝CDN，如下图（来自网络）：</p>
<p> <img src="http://images2015.cnblogs.com/blog/820332/201606/820332-20160606062859808-1261244246.png" alt="淘宝CDN"></p>
<h3 id="三、反向代理缓存"><a href="#三、反向代理缓存" class="headerlink" title="三、反向代理缓存"></a>三、反向代理缓存</h3><p>反向代理是指在网站服务器机房部署代理服务器，实现负载均衡，数据缓存，安全控制等功能。</p>
<h4 id="3-1缓存原理"><a href="#3-1缓存原理" class="headerlink" title="3.1缓存原理"></a>3.1缓存原理</h4><p>反向代理位于应用服务器机房，处理所有对WEB服务器的请求。如果用户请求的页面在代理服务器上有缓冲的话，代理服务器直接将缓冲内容发送给用户。如果没有缓冲则先向WEB服务器发出请求，取回数据，本地缓存后再发送给用户。通过降低向WEB服务器的请求数，从而降低了WEB服务器的负载。</p>
<p><img src="http://images2015.cnblogs.com/blog/820332/201606/820332-20160606062912886-1223701582.png" alt=""></p>
<ul>
<li>反向代理一般缓存静态资源，动态资源转发到应用服务器处理。常用的缓存应用服务器有Varnish，Ngnix，Squid。</li>
</ul>
<h4 id="3-2-Squid示例"><a href="#3-2-Squid示例" class="headerlink" title="3.2 Squid示例"></a>3.2 Squid示例</h4><p>Squid 反向代理一般只缓存静态资源，动态程序默认不缓存。根据从 WEB 服务器返回的 HTTP 头标记来缓冲静态页面。有四个最重要 HTTP 头标记：</p>
<pre><code>Last-Modified: 告诉反向代理页面什么时间被修改

Expires: 告诉反向代理页面什么时间应该从缓冲区中删除

Cache-Control: 告诉反向代理页面是否应该被缓冲

Pragma: 用来包含实现特定的指令，最常用的是 Pragma:no-cache
</code></pre><p> <img src="http://images2015.cnblogs.com/blog/820332/201606/820332-20160606062921683-1401924233.jpg" alt="Squid 反向代理"></p>
<p>Squid 反向代理加速网站实例</p>
<p>（1）       通过DNS的轮询技术，将客户端的请求分发给其中一台 Squid 反向代理服务器处理；</p>
<p>（2）       如果这台 Squid 缓存了用户的请求资源，则将请求的资源直接返回给用户；</p>
<p>（3）       否则这台 Squid 将没有缓存的请求根据配置的规则发送给邻居 Squid 和后台的 WEB 服务器处理；</p>
<p>（4）       这样既减轻后台 WEB 服务器的负载，又提高整个网站的性能和安全性。</p>
<h4 id="3-2-代理缓存比较"><a href="#3-2-代理缓存比较" class="headerlink" title="3.2 代理缓存比较"></a>3.2 代理缓存比较</h4><p>常用的代理缓存有Varnish，Squid，Ngnix，简单比较如下：</p>
<p>（1）       varnish和squid是专业的cache服务，nginx需要第三方模块支持；</p>
<p>（2）       Varnish采用内存型缓存，避免了频繁在内存、磁盘中交换文件，性能比Squid高；</p>
<p>（3）       Varnish由于是内存cache，所以对小文件如css,js,小图片啥的支持很棒，后端的持久化缓存可以采用的是Squid或ATS；</p>
<p>（4）       Squid功能全而大，适合于各种静态的文件缓存，一般会在前端挂一个HAProxy或nginx做负载均衡跑多个实例；</p>
<p>（5）       Nginx采用第三方模块ncache做的缓冲，性能基本达到varnish，一般作为反向代理使用，可以实现简单的缓存。</p>
]]></content>
    
    <summary type="html">
    
      介绍分布式系统缓存和其应用场景
    
    </summary>
    
      <category term="分布式架构" scheme="http://iamohero.github.io/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="缓存" scheme="http://iamohero.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
      <category term="分布式架构" scheme="http://iamohero.github.io/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+GitHub搭建个人博客</title>
    <link href="http://iamohero.github.io/2017/05/10/howtohexo/"/>
    <id>http://iamohero.github.io/2017/05/10/howtohexo/</id>
    <published>2017-05-10T08:48:17.000Z</published>
    <updated>2017-05-10T14:23:59.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>今晚闲暇，实在不知道该干什么，于是捡起了搭博客的想法，入门了hexo搭建github博客，现在记录下来，也算是作个念象，给想要搭建个人博客网站的小伙伴们一个参考。</p>
<p>PS: 因本人使用的是苹果机，所以本教程以Mac OS为参考，其实mac与windows搭建github博客相差无几，如果有用windows的小伙伴感到不适，可以参考<a href="http://www.jianshu.com/p/701b1095da11" target="_blank" rel="external">手把手教你建github技术博客</a>教程。<br><a id="more"></a></p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="1-注册Github账号"><a href="#1-注册Github账号" class="headerlink" title="1. 注册Github账号"></a>1. 注册Github账号</h4><ul>
<li>这里我们就不多讲了，小伙伴们可以点击<a href="https://github.com" target="_blank" rel="external">这里</a>，进入官网进行注册。</li>
</ul>
<h4 id="2-创建仓库"><a href="#2-创建仓库" class="headerlink" title="2. 创建仓库"></a>2. 创建仓库</h4><ul>
<li>登录账号后，在Github页面的右上方选择New repository进行仓库的创建。<br><img src="//upload-images.jianshu.io/upload_images/291600-7cec7b9f28359ea5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
</ul>
<ul>
<li><p>在仓库名字输入框中输入：</p>
<pre><code>Github昵称.github.io
</code></pre><p>然后点击<code>Create repository</code>即可。</p>
</li>
</ul>
<h4 id="3-生成添加秘钥"><a href="#3-生成添加秘钥" class="headerlink" title="3. 生成添加秘钥"></a>3. 生成添加秘钥</h4><ul>
<li><p>在终端（Terminal）输入：</p>
<pre><code>ssh-keygen -t rsa -C &quot;Github的注册邮箱地址&quot;
</code></pre><p>一路Enter过来就好，待秘钥生成完毕，会得到两个文件<code>id_rsa和id_rsa.pub</code>，<br>用带格式的记事本打开id_rsa.pub，Ctrl + a复制里面的所有内容，然后进入<a href="https://github.com/settings/ssh" target="_blank" rel="external">https://github.com/settings/ssh</a><br>将复制的内容粘贴到Key的输入框，随便写好Title里面的内容，点击Add SSH key按钮即可。</p>
</li>
</ul>
<h4 id="4-安装node-js"><a href="#4-安装node-js" class="headerlink" title="4. 安装node.js"></a>4. 安装node.js</h4><ul>
<li><p>点击进入<a href="https://nodejs.org/en/" target="_blank" rel="external">node.js官网</a><br><img src="//upload-images.jianshu.io/upload_images/291600-90eef94fb6e1595f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</li>
<li><p>目前node.js有两个推荐版本，分为<a href="">通用版</a>和<a href="">最新版</a>，点击可直接进行下载。下载好后，按照既定的套路安装即可。</p>
</li>
</ul>
<h4 id="5-安装git"><a href="#5-安装git" class="headerlink" title="5. 安装git"></a>5. 安装git</h4><ul>
<li>这里说的git实则是为了使用git指令，我们的git使用一般有两种方式，一种是<strong>图形化界面（GUI）</strong>，另一种是通过<strong>命令行</strong>，<br>我们这里要使用的是后者，点击这里进入git的<a href="http://git-scm.com/downloads" target="_blank" rel="external">下载网站</a>下载git的安装包。</li>
<li>有人说，Mac自带git指令；也有人说安装xcode就可以使用git指令。因本人已经忘记当初自己是如何安装git的，所以大家根据自己的实际情况做决定吧。</li>
</ul>
<h4 id="6-安装配置hexo"><a href="#6-安装配置hexo" class="headerlink" title="6. 安装配置hexo"></a>6. 安装配置hexo</h4><ul>
<li>强调一下，这一步使我们搭建博客的核心，是重中之重。<br><img src="//upload-images.jianshu.io/upload_images/291600-fc61b6d6d2b38fa2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></li>
</ul>
<blockquote>
<p>接下来我们的操作都将在Terminal终端进行</p>
</blockquote>
<ul>
<li>定位博客本地放置的路径<pre><code>$ cd 文件夹
</code></pre></li>
<li><p>下载安装hexo</p>
<pre><code>$ npm install -g hexo-cli
</code></pre></li>
<li><p>安装好hexo以后，在终端输入：</p>
<pre><code>$ hexo --version
</code></pre></li>
<li><p>初始化博客</p>
<pre><code>// 建立一个博客文件夹，并初始化博客，&lt;folder&gt;为文件夹的名称，可以随便起名字
$ hexo init &lt;folder&gt;
// 进入博客文件夹，&lt;folder&gt;为文件夹的名称
$ cd &lt;folder&gt;
// node.js的命令，根据博客既定的dependencies配置安装所有的依赖包
$ npm install
</code></pre></li>
<li><p>配置博客</p>
<ol>
<li><p>修改config</p>
<pre><code>vim _config.yml
</code></pre></li>
<li><p>修改网站相关信息</p>
<pre><code>title: iamohero
subtitle: the stack of it nerds
description: start from zero
author: iamohero
language: zh-CN
timezone: Asia/Shanghai
</code></pre></li>
<li><p>配置统一资源定位符（个人域名）</p>
<pre><code>url: http://iamohero.github.io
</code></pre></li>
<li>配置部署<pre><code>deploy:
    type: git
    repo: https://github.com/iamohero/iamohero.github.io.git
    branch: master
</code></pre></li>
</ol>
</li>
</ul>
<h4 id="7-部署"><a href="#7-部署" class="headerlink" title="7. 部署"></a>7. 部署</h4><ul>
<li><p>每次部署的步骤，可按以下三步来进行。</p>
<pre><code>hexo clean

hexo generate

hexo deploy
</code></pre></li>
<li><p>一些常用命令：</p>
<pre><code>hexo new&quot;postName&quot; #新建文章

hexo new page&quot;pageName&quot; #新建页面

hexo generate #生成静态页面至public目录

hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）

hexo deploy #将.deploy目录部署到GitHub

hexo help # 查看帮助

hexo version #查看Hexo的版本
</code></pre></li>
</ul>
<h4 id="8-最酷的-Material-Design-主题"><a href="#8-最酷的-Material-Design-主题" class="headerlink" title="8. 最酷的 Material Design 主题"></a>8. 最酷的 Material Design 主题</h4><ul>
<li><p>介绍及文档：</p>
<p>  <a href="">Material Theme</a></p>
</li>
<li><p>Github:</p>
<p>  <a href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="external">hexo-theme-material</a></p>
</li>
<li><p>Demo:</p>
<p>  <a href="">Paradox 样式</a></p>
</li>
<li><p>因未能提供全部样式的实时预览， Demo 使用的是 Paradox 样式。</p>
</li>
<li><p>快速体验</p>
<p>  开始定制独一无二的主题：</p>
<pre><code>git clone https://github.com/viosey/hexo-theme-material.git
</code></pre><p>或</p>
<pre><code>npm install hexo-material
</code></pre></li>
</ul>
<h4 id="9-发表一篇文章"><a href="#9-发表一篇文章" class="headerlink" title="9. 发表一篇文章"></a>9. 发表一篇文章</h4><ul>
<li>在终端输入：<pre><code>// 新建一篇文章
hexo new &quot;文章标题&quot;
</code></pre></li>
<li><p>我们可以在本地博客文件夹source-&gt;_post文件夹下看到我们新建的markdown文件。</p>
</li>
<li><p>用Markdown编辑器打开文件，我们可以看到这样的内容：<br><img src="//upload-images.jianshu.io/upload_images/291600-b65250dd3ecb585b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p><img src="//upload-images.jianshu.io/upload_images/291600-9cc8db576372ccd9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
</li>
<li><p>保存后，我们进行本地发布：</p>
<pre><code>$ hexo server
</code></pre><p>如下图：</p>
<p><img src="//upload-images.jianshu.io/upload_images/291600-df83a54c79bcd507.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>
<p>打开浏览器，输入下面地址就能看到我们搭建好的博客和发布的文章了。</p>
<pre><code>http://localhost:4000/
</code></pre></li>
</ul>
<ul>
<li><p>但是毕竟我们目前发布的只有本机看得到，怎么让其他人看到我们写的博客呢？<br>这时候我们来看看博客的部署。</p>
<p>我们只要在终端执行这样的命令即可：</p>
<pre><code>$ hexo generate
$ hexo deploy
</code></pre><p>这时候我们的博客已经部署到网上了，我们可以在浏览器地址输入栏输入我们的网址即可，<br>例如我的博客是：<a href="http://iamohero.github.io。" target="_blank" rel="external">http://iamohero.github.io。</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      使用Hexo在GitHub上搭建个人博客
    
    </summary>
    
      <category term="Hexo" scheme="http://iamohero.github.io/categories/Hexo/"/>
    
      <category term="安装手顺" scheme="http://iamohero.github.io/categories/Hexo/%E5%AE%89%E8%A3%85%E6%89%8B%E9%A1%BA/"/>
    
    
      <category term="Hexo" scheme="http://iamohero.github.io/tags/Hexo/"/>
    
      <category term="Material Theme" scheme="http://iamohero.github.io/tags/Material-Theme/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://iamohero.github.io/2017/05/10/hello-world/"/>
    <id>http://iamohero.github.io/2017/05/10/hello-world/</id>
    <published>2017-05-10T01:51:17.000Z</published>
    <updated>2017-05-10T01:51:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
